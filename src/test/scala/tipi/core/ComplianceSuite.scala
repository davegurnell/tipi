package tipi.core

import org.scalatest._

class ComplianceSuite extends FunSuite {
  val tipi = Tipi()

  // Test filenames are generated by the build script and placed here:
  val indexPath = "/compliance.index"

  def resourceSource(path: String) =
    io.Source.fromURL(getClass.getResource(path))

  // These are the test filenames:
  lazy val tipiTests: List[(String, String)] = {
    for {
      line  <- resourceSource(indexPath).getLines.toList
      files <- line.split("=>").toList match {
                 case src :: des :: Nil => Some((src.trim, des.trim))
                 case _ => None
               }
    } yield files
  }

  // Rough and ready way of focusing on one test:
  def doTest(src: String, des: String): Boolean = {
    "basic/".r.findFirstIn(src).isDefined
  }

  for((src, des) <- tipiTests if doTest(src, des)) {
    test(src + " => " + des) {
      tipi(resourceSource(src).mkString) match {
        case Left(error) =>
          fail("Could not parse input: " + error)

        case Right(actual) =>
          val expected = resourceSource(des).mkString
          assert("[[[%s]]]".format(actual) === "[[[%s]]]".format(expected))
      }
    }
  }
}